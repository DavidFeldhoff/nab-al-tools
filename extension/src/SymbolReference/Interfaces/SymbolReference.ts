// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface SymbolReference {
    Tables: TableDefinition[];
    Codeunits: CodeunitDefinition[];
    Pages: PageDefinition[];
    PageExtensions: SymbolPageExtension[];
    PageCustomizations: any[];
    TableExtensions: SymbolTableExtension[];
    Reports: SymbolReport[];
    XmlPorts: SymbolXMLPort[];
    Queries: any[];
    Profiles: SymbolProfile[];
    ProfileExtensions: any[];
    ControlAddIns: any[];
    EnumTypes: SymbolEnumType[];
    EnumExtensionTypes: any[];
    DotNetPackages: any[];
    Interfaces: SymbolInterface[];
    PermissionSets: any[];
    PermissionSetExtensions: any[];
    ReportExtensions: any[];
    InternalsVisibleToModules: SymbolInternalsVisibleToModule[];
    AppId: string;
    Name: string;
    Publisher: string;
    Version: string;
}

interface CodeunitDefinition {
    Methods?: MethodDefinition[];
    ReferenceSourceFileName: string;
    Properties?: SymbolProperty[];
    Id: number;
    Name: string;
    Variables?: CodeunitVariable[];
    ImplementedInterfaces?: string[];
    Attributes?: AttributeDefinition[];
}


interface MethodDefinition extends LanguageElement {
    Attributes?: AttributeDefinition[];
    IsInternal?: boolean;
    IsLocal?: boolean;
    IsProtected?: boolean;
    MethodKind: MethodKind;
    Parameters: ParameterDefinition[];
    ReturnTypeDefinition: TypeDefinition;
}

interface AttributeDefinition {
    Arguments: AttributeArgumentDefinition[];
    Name: string;
}

interface AttributeArgumentDefinition {
    Value: string;
}


interface ParameterDefinition {
    ArrayDimensions: string;
    IsVar?: boolean;
    Name: string;
    OptionMembers: string;
    Subtype?: Subtype;
    Type: string;
    TypeDefinition: TypeDefinition;
}

interface TypeDefinition {
    Name: string;
    Temporary: boolean;
    Subtype?: Subtype;
    OptionMembers?: string[];
    ArrayDimensions?: number[];
    TypeArguments?: TypeDefinition[];
}

interface Subtype {
    Name: string;
    Id?: number;
    IsEmpty: boolean;
}

export interface SymbolProperty {
    Value: string;
    Name: string;
}

interface CodeunitVariable {
    TypeDefinition: TypeDefinition;
    Protected: boolean;
    Name: string;
    Attributes?: AttributeDefinition[];
}

interface SymbolEnumType {
    Values: Value[];
    ReferenceSourceFileName: string;
    Id: number;
    Name: string;
    ImplementedInterfaces?: string[];
    Properties?: SymbolProperty[];
}

interface Value {
    Ordinal: number;
    Properties: SymbolProperty[];
    Name: string;
}

interface SymbolInterface {
    Methods: InterfaceMethod[];
    ReferenceSourceFileName: string;
    Name: string;
}

interface InterfaceMethod {
    ReturnTypeDefinition: TypeDefinition;
    MethodKind: MethodKind;
    Parameters: ParameterDefinition[];
    Id: number;
    Name: string;
}

enum MethodKind {
    Method,
    Trigger,
    BuiltInMethod,
    BuiltInOperator,
    Property,
    DeclareMethod,
    EventTrigger
}
interface SymbolInternalsVisibleToModule {
    AppId: string;
    Name: string;
    Publisher: string;
}

interface SymbolPageExtension {
    TargetObject: string;
    Variables: VariableDefinition[];
    ControlChanges?: ExtensionControlDefinition[];
    ReferenceSourceFileName: string;
    Id: number;
    Name: string;
    ActionChanges?: ActionChange[];
}

interface ActionChange {
    Anchor: string;
    ChangeKind: ChangeKind;
    Actions: Action[];
}

interface Action {
    Kind: ActionKind;
    Actions: ControlDefinition[];
    Properties: SymbolProperty[];
    Id: number;
    Name: string;
}
export enum ActionKind {
    Area,
    Group,
    Action,
    Separator
}

interface ActionDefinition extends LanguageElementWithProperties {
    Actions?: ActionDefinition[];
    Kind: ActionKind;
}
export interface ControlDefinition extends LanguageElementWithProperties {
    Actions?: ActionDefinition[];
    Controls?: ControlDefinition[];
    Kind: ControlKind;
    RelatedControlAddIn?: string;
    RelatedPagePartId?: string;
    Type: string;
    TypeDefinition: ActionTypeDefinition;
}

export enum ControlKind {
    Area,
    Group,
    CueGroup,
    Repeater,
    Fixed,
    Grid,
    Part,
    SystemPart,
    Field,
    Label,
    UserControl,
    ChartPart
}
export enum ControlElementKind {
    Area,
    Group,
    CueGroup,
    Repeater,
    Fixed,
    Grid,
    Part,
    SystemPart,
    Field,
    Label,
    UserControl,
    ChartPart
}
interface FieldDefinition extends LanguageElementWithProperties {
    Methods: MethodDefinition[];
    OptionMembers: string;
    Type: string;
    TypeDefinition: TypeDefinition;
}


interface ActionTypeDefinition {
    Name: string;
    Temporary: boolean;
    OptionMembers?: string[];
    Subtype?: Subtype;
}

interface ExtensionControlDefinition {
    Anchor: string;
    ChangeKind: ChangeKind;
    Controls: ControlDefinition[];
}
enum ChangeKind {
    Add,
    AddFirst,
    AddLast,
    AddBefore,
    AddAfter,
    MoveFirst,
    MoveLast,
    MoveBefore,
    MoveAfter,
    Modify
}

interface VariableDefinition extends LanguageElement {
    ArrayDimensions: string;
    Attributes: AttributeDefinition[];
    OptionMembers: string;
    Protected: boolean;
    Subtype: Subtype;
    Type: string;
    TypeDefinition: TypeDefinition;
}
interface LanguageElementWithProperties extends LanguageElement {
    Properties: SymbolProperty[];
}
interface LanguageElement {
    Id?: number;
    Name: string;
}
export interface PageDefinition extends LanguageElementWithProperties {
    Actions?: ActionDefinition[];
    Controls?: ControlDefinition[];
    Methods?: MethodDefinition[];
    ReferenceSourceFileName: string;
    Variables?: CodeunitVariable[];
    views?: ViewDefinition[];
}
interface ViewDefinition {
    ControlChanges: ExtensionControlDefinition[];
}

interface SymbolProfile {
    ReferenceSourceFileName: string;
    Properties: SymbolProperty[];
    Name: string;
}

interface SymbolReport {
    Variables: VariableDefinition[];
    RequestPage: RequestPage;
    DataItems: DataItem[];
    ReferenceSourceFileName: string;
    Properties: SymbolProperty[];
    Id: number;
    Name: string;
}

interface DataItem {
    RelatedTable: string;
    Indentation: number;
    Columns: any[];
    DataItems: any[];
    Properties: SymbolProperty[];
    Id: number;
    Name: string;
}

interface RequestPage {
    Controls: ControlDefinition[];
    Id: number;
    Name: string;
}

interface SymbolTableExtension {
    TargetObject: string;
    Fields: ControlDefinition[];
    ReferenceSourceFileName: string;
    Id: number;
    Name: string;
}

export interface TableDefinition extends LanguageElementWithProperties {
    DefinedEnums: EnumTypeDefinition[];
    FieldGroups?: FieldGroupDefinition[];
    Fields?: FieldDefinition[];
    Keys: KeyDefinition[];
    Methods?: MethodDefinition[];
    ReferenceSourceFileName: string;
    Variables?: VariableDefinition[];
}
interface EnumTypeDefinition extends LanguageElementWithProperties {
    ImplementedInterfaces?: string;
    ReferenceSourceFileName: string;
    Values?: EnumValueDefinition[];
}
interface EnumValueDefinition extends LanguageElementWithProperties {
    Ordinal: number;
}
interface FieldGroupDefinition extends LanguageElementWithProperties {
    FieldNames: string[];
}

interface KeyDefinition extends LanguageElementWithProperties {
    FieldNames: string[];
}


interface SymbolXMLPort {
    Variables?: VariableDefinition[];
    Methods: XMLPortMethod[];
    ReferenceSourceFileName: string;
    Properties: SymbolProperty[];
    Id: number;
    Name: string;
}

interface XMLPortMethod {
    ReturnTypeDefinition: TypeDefinition;
    IsInternal: boolean;
    MethodKind: MethodKind;
    Parameters: ParameterDefinition[];
    Id: number;
    Name: string;
}
