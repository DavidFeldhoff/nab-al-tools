// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface SymbolReference {
    Tables: Table[];
    Codeunits: Codeunit[];
    Pages: Page[];
    PageExtensions: PageExtension[];
    PageCustomizations: any[];
    TableExtensions: TableExtension[];
    Reports: Report[];
    XmlPorts: XMLPort[];
    Queries: any[];
    Profiles: Profile[];
    ProfileExtensions: any[];
    ControlAddIns: any[];
    EnumTypes: EnumType[];
    EnumExtensionTypes: any[];
    DotNetPackages: any[];
    Interfaces: Interface[];
    PermissionSets: any[];
    PermissionSetExtensions: any[];
    ReportExtensions: any[];
    InternalsVisibleToModules: InternalsVisibleToModule[];
    AppId: string;
    Name: string;
    Publisher: string;
    Version: string;
}

export interface Codeunit {
    Methods?: CodeunitMethod[];
    ReferenceSourceFileName: string;
    Properties?: Property[];
    Id: number;
    Name: string;
    Variables?: CodeunitVariable[];
    ImplementedInterfaces?: string[];
}


export interface CodeunitMethod {
    ReturnTypeDefinition: ReturnTypeDefinition;
    MethodKind: number;
    Parameters: Parameter[];
    Id: number;
    Name: string;
    Attributes?: Attribute[];
    IsInternal?: boolean;
    IsLocal?: boolean;
}

export interface Attribute {
    Arguments: Argument[];
    Name: string;
}

export interface Argument {
    Value: string;
}


export interface Parameter {
    Name: string;
    TypeDefinition: ParameterTypeDefinition;
    IsVar?: boolean;
}

export interface ParameterTypeDefinition {
    Name: string;
    Temporary: boolean;
    Subtype?: Subtype;
    OptionMembers?: string[];
    ArrayDimensions?: number[];
    TypeArguments?: TypeArgument[];
}

export interface Subtype {
    Name: string;
    Id?: number;
    IsEmpty: boolean;
}

export interface TypeArgument {
    Name: string;
    Temporary: boolean;
    TypeArguments?: ReturnTypeDefinition[];
}

export interface ReturnTypeDefinition {
    Name: string;
    Temporary: boolean;
}

export interface Property {
    Value: string;
    Name: string;
}

export interface CodeunitVariable {
    TypeDefinition: ParameterTypeDefinition;
    Protected: boolean;
    Name: string;
    Attributes?: Attribute[];
}

export interface EnumType {
    Values: Value[];
    ReferenceSourceFileName: string;
    Id: number;
    Name: string;
    ImplementedInterfaces?: string[];
    Properties?: Property[];
}

export interface Value {
    Ordinal: number;
    Properties: Property[];
    Name: string;
}

export interface Interface {
    Methods: InterfaceMethod[];
    ReferenceSourceFileName: string;
    Name: string;
}

export interface InterfaceMethod {
    ReturnTypeDefinition: ReturnTypeDefinition;
    MethodKind: number;
    Parameters: Parameter[];
    Id: number;
    Name: string;
}

export interface InternalsVisibleToModule {
    AppId: string;
    Name: string;
    Publisher: string;
}

export interface PageExtension {
    TargetObject: string;
    Variables: PageExtensionVariable[];
    ControlChanges?: ControlChange[];
    ReferenceSourceFileName: string;
    Id: number;
    Name: string;
    ActionChanges?: ActionChange[];
}

export interface ActionChange {
    Anchor: string;
    ChangeKind: number;
    Actions: Action[];
}

export interface Action {
    Kind: number;
    Actions: ControlElement[];
    Properties: Property[];
    Id: number;
    Name: string;
}

export interface ControlElement {
    Kind?: number;
    Actions?: ControlElement[];
    Properties?: Property[];
    Id: number;
    Name: string;
    TypeDefinition?: ActionTypeDefinition;
    Controls?: ActionControl[];
}

export interface ActionControl {
    Kind: number;
    Controls?: PurpleControl[];
    TypeDefinition: ReturnTypeDefinition;
    Id: number;
    Name: string;
    Properties?: Property[];
    RelatedPagePartId?: Subtype;
}

export interface PurpleControl {
    Kind: number;
    TypeDefinition: ParameterTypeDefinition;
    Properties: Property[];
    Id: number;
    Name: string;
    Controls?: FluffyControl[];
    RelatedPagePartId?: Subtype;
}

export interface FluffyControl {
    Kind: number;
    TypeDefinition: ParameterTypeDefinition;
    Properties: Property[];
    Id: number;
    Name: string;
    RelatedPagePartId?: Subtype;
}

export interface ActionTypeDefinition {
    Name: string;
    Temporary: boolean;
    OptionMembers?: string[];
    Subtype?: Subtype;
}

export interface ControlChange {
    Anchor: string;
    ChangeKind: number;
    Controls: ControlChangeControl[];
}

export interface ControlChangeControl {
    Kind: number;
    Controls?: ControlElement[];
    TypeDefinition: ReturnTypeDefinition;
    Properties: Property[];
    Id: number;
    Name: string;
    RelatedPagePartId?: Subtype;
}

export interface PageExtensionVariable {
    TypeDefinition: ParameterTypeDefinition;
    Protected: boolean;
    Name: string;
}

export interface Page {
    Controls?: ControlElement[];
    Actions?: ControlElement[];
    ReferenceSourceFileName: string;
    Properties: Property[];
    Id: number;
    Name: string;
    Variables?: CodeunitVariable[];
    Methods?: CodeunitMethod[];
}

export interface Profile {
    ReferenceSourceFileName: string;
    Properties: Property[];
    Name: string;
}

export interface Report {
    Variables: PageExtensionVariable[];
    RequestPage: RequestPage;
    DataItems: DataItem[];
    ReferenceSourceFileName: string;
    Properties: Property[];
    Id: number;
    Name: string;
}

export interface DataItem {
    RelatedTable: string;
    Indentation: number;
    Columns: any[];
    DataItems: any[];
    Properties: Property[];
    Id: number;
    Name: string;
}

export interface RequestPage {
    Controls: ControlElement[];
    Id: number;
    Name: string;
}

export interface TableExtension {
    TargetObject: string;
    Fields: ControlElement[];
    ReferenceSourceFileName: string;
    Id: number;
    Name: string;
}

export interface Table {
    Fields: ControlElement[];
    Keys: Key[];
    Methods?: TableMethod[];
    ReferenceSourceFileName: string;
    Properties: Property[];
    Id: number;
    Name: string;
    Variables?: PageExtensionVariable[];
    FieldGroups?: FieldGroup[];
}

export interface FieldGroup {
    FieldNames: string[];
    Name: string;
}

export interface Key {
    FieldNames: string[];
    Name: string;
    Properties?: Property[];
}

export interface TableMethod {
    ReturnTypeDefinition: ReturnTypeDefinition;
    IsInternal: boolean;
    MethodKind: number;
    Parameters: Parameter[];
    Id: number;
    Name: string;
    Attributes?: Attribute[];
}

export interface XMLPort {
    Variables?: PageExtensionVariable[];
    Methods: XMLPortMethod[];
    ReferenceSourceFileName: string;
    Properties: Property[];
    Id: number;
    Name: string;
}

export interface XMLPortMethod {
    ReturnTypeDefinition: ReturnTypeDefinition;
    IsInternal: boolean;
    MethodKind: number;
    Parameters: Parameter[];
    Id: number;
    Name: string;
}
